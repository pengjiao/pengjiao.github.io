[
{
	"uri": "/en/datamining/",
	"title": "DataMining",
	"tags": [],
	"description": "",
	"content": "Chapter 1 DataMining Data mining from public databases, such as TCGA, DepMap, and others, provides insights into the molecular profiles of cancers and various diseases.\n"
},
{
	"uri": "/en/datamining/2023-08-10-tcga-gtex-data-mining-1/",
	"title": "TCGA GTEx data mining 1",
	"tags": ["R Markdown"],
	"description": "",
	"content": "\rThe FOLR1 gene and the MUC16 gene are significant genes involved in ovarian cancer, potentially serving as therapeutic targets.\nIn this blog post, I will investigate the expression levels of the MUC16 gene in ovarian cancer patients who exhibit low expression of the FOLR1 gene. The analysis will involve comparing gene exression data from ovarian cancer tissue with that from normal ovary tissue. However, given the lack of normal ovary control in The Cancer Genome Atlas (TCGA) data, I have incorporated normal ovary data from the Genotype-Tissue Expression (GTEx) database.\nThe RECOUNT2 and UCSC Xena projects, which provide gene expression data from TCGA and GTEx database, utilize consistent preprocessing pipelines to reduce batch effects and enhance the reliability of comparisons across diverse studies. Yet, these two projects may employ different preprocessing and normalization methods. To ensure the robustness of results, I have treated the two projects separately in this analysis.\nFor data acquisition, the R packages TCGAbiolinks (using the TCGAquery_recount2 function) and UCSCXenaTools were used to query and download TCGA-OV data and normal ovarian tissue data from GTEx, available in both the RECOUNT2 and UCSC Xena projects.\n01. Load library\rWe first need to load the necessary R packages that will be utilized throughout our study.\nlibrary(SummarizedExperiment)\rlibrary(TCGAbiolinks)\rlibrary(recount)\rlibrary(biomaRt)\rlibrary(org.Hs.eg.db)\rlibrary(dplyr)\rlibrary(tibble)\rlibrary(CCSBUtils)\rlibrary(ggpubr)\rlibrary(stringr)\r02. Data from RECOUNT2 project\rData prepare\rNext, we obtain and prepare our gene expression data from the RECOUNT2 project using R package TCGAbiolinks (TCGAquery_recount2).\nTCGAbiolinks is an R package that provides an integrated interface to access, analyze, and visualize TCGA data. With its ‘TCGAquery_recount2’ function, it allows us to access the preprocessed gene expression data available on the RECOUNT2 project with ease.\nIn the following steps, we’ll focus on tidying up this data, ensuring it’s ready for the subsequent analysis stages. We’ll select our genes of interest (FOLR1 and MUC16), and create subsets of the data corresponding to ovarian cancer samples and normal ovary tissue samples.\nAfter we obtain the data, we extract the gene expression data for the ovary tissue from both projects into SummarizedExperiment (SE) objects. These objects are then saved in an RData file for future reference and reanalysis.\n## query from Recount2 platform: Ovary Carcinoma\rrecount.gtex \u0026lt;- TCGAquery_recount2(project=\u0026quot;GTEX\u0026quot;, tissue=\u0026quot;ovary\u0026quot;)\rrecount.tcga \u0026lt;- TCGAquery_recount2(project=\u0026quot;TCGA\u0026quot;, tissue=\u0026quot;ovary\u0026quot;)\r## save data for reanalysis\r# save(recount.gtex, recount.tcga, file = \u0026quot;recount_gtex_tcga_ovary.RData\u0026quot;)\r#load(\u0026quot;recount_gtex_tcga_ovary.RData\u0026quot;)\r## to get the SE object\rSE.recount.gtex \u0026lt;- recount.gtex$GTEX_ovary\rSE.recount.tcga \u0026lt;- recount.tcga$TCGA_ovary\rThe Recount2 project uses Rail-RNA as its primary computational pipeline to process and align RNA sequencing (RNA-seq) data. Rail-RNA is an alignment and transcriptome reconstruction tool. There is difference between coverage counts from Recount2 project using Rail-RNA and typical read count matrices. Rail-RNA employs a “binning” procedure to the aligned reads, resulting in what are sometimes called “read coverage” or “coverage counts”. These coverage counts are the number of reads that overlap with each base pair of a gene, rather than just counting each read once as is done in traditional “read counts”. However, most methods were developed for read typical count matrices. Therefore, the Recount2 data must be scaled in order to compare samples within and across studies. Scaling ensures that differences in sequencing depth across samples do not distort the counts, making them directly comparable. In the context of your analysis, scaling the Recount2 data ensures that the gene expression levels you observe are reflective of true biological differences, rather than technical differences from sequencing.\nThere are two methods to scale the count data: either auc or mapped_reads. If set to auc it will scale the counts by the total coverage of the sample. That is, the area under the curve (AUC) of the coverage. If set to mapped_reads it will scale the counts by the number of mapped reads, whether the library was paired-end or not, and the desired read length (L).\n\\[\r\\sum_{i} \\frac{coverage_i}{AUC} * target = \\text{{scaled read counts}} \\tag{1}\r\\]\n\\[\r\\sum_{i} \\frac{coverage_i}{\\text{{Read Length}} * target}{mapped} = \\text{{scaled read counts}} \\tag{2}\r\\]\n## preparing/scaling Recount2 data because it was sequenced using Rail-RNA\reset.gtex \u0026lt;- assays(scale_counts(recount.gtex$GTEX_ovary, round = TRUE))$counts\reset.tcga \u0026lt;- assays(scale_counts(recount.tcga$TCGA_ovary, round = TRUE))$counts\r## Check that the number of reads is less than or equal to 40 million\rrse_scaled \u0026lt;- scale_counts(recount.gtex$GTEX_ovary, round = TRUE)\rsummary(colSums(assays(rse_scaled)$counts)) / 1e6\r## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 31.33 34.77 35.37 35.52 36.42 38.67\rThe next step is to segregate the TCGA data into primary tumors and normal samples. Note that TCGA does not typically include normal tissue samples. We then merge the GTEx and TCGA cancer data, joining them by gene names. This creates a new dataframe where each row represents a gene and the columns contain expression data from the two different sources. Duplicates, which might have same gene ID are removed. Lastly, we normalize and filter the data using TCGAanalyze functions from the TCGAbiolinks package. This includes GC content normalization, which adjusts for the varying guanine and cytosine content across different genes. Then, we apply a quantile filter, removing genes that have expression values in the lowest 25% quantile, as they may represent noise.\nThis completes the data preparation process. With this, our gene expression data from RECOUNT2 is now ready for further analysis.\n## replacing UUIDs with TCGA barcodes:\rcolnames(eset.tcga) \u0026lt;- colData(recount.tcga$TCGA_ovary)$gdc_cases.samples.portions.analytes.aliquots.submitter_id\r## segregate between primary tumors and normal samples\reset.tcga.cancer \u0026lt;- eset.tcga[,which(colData(recount.tcga$TCGA_ovary)$gdc_cases.samples.sample_type==\u0026quot;Primary Tumor\u0026quot;)]\reset.tcga.normal \u0026lt;- eset.tcga[,which(colData(recount.tcga$TCGA_ovary)$gdc_cases.samples.sample_type==\u0026quot;Solid Tissue Normal\u0026quot;)] # there is no tissue normal\r## merging data by row names\rdataPrep.ov \u0026lt;- merge(as.data.frame(eset.gtex), as.data.frame(eset.tcga.cancer), by=0, all=TRUE)\r## rename gene id and remove duplicated rows with same gene id\rdataPrep.ov \u0026lt;- column_to_rownames(dataPrep.ov, var = \u0026quot;Row.names\u0026quot;)\rnewgene \u0026lt;- str_split(rownames(dataPrep.ov), \u0026quot;\\\\.\u0026quot;, simplify = T)[,1]\rdataPrep.fil \u0026lt;- dataPrep.ov[which(!duplicated(newgene)),]\rrownames(dataPrep.fil) \u0026lt;- newgene[which(!duplicated(newgene))]\r## normalization and filtering data\rdataNorm.ov \u0026lt;- TCGAanalyze_Normalization(tabDF = dataPrep.fil,\rgeneInfo = geneInfoHT,\rmethod = \u0026quot;gcContent\u0026quot;)\rdataFilt.ov \u0026lt;- TCGAanalyze_Filtering(tabDF = dataNorm.ov,\rmethod = \u0026quot;quantile\u0026quot;, qnt.cut = 0.25)\rDifferential analysis\rThen, we perform differential expression analysis between normal and tumor samples using the TCGAanalyze_DEA function from the TCGAbiolinks package. This analysis is performed on a set of 108 normal and 430 tumor samples across 42755 mRNA or genes.\nThe ‘method’ argument is set to ‘glmLRT’, which specifies the use of the likelihood ratio test for model fitting in the limma package.\nAfter the differential expression analysis, the Ensembl gene IDs in the result are converted to HGNC symbols using the BioMart package. This makes the results more interpretable as HGNC symbols are more commonly used in the literature. The ‘getBM’ function from the BioMart package is used for this conversion. The resulting table contains both the Ensembl gene IDs and corresponding HGNC symbols for each differentially expressed gene.\n## set \u0026quot;metadata\u0026quot; argument to true when dealing with TCGA data\r#in order to extract batch correction data\r#processing 108 normal and 430 tumor samples on 42755 mRNA or genes\rDEG.ov \u0026lt;- TCGAanalyze_DEA( mat1 = dataFilt.ov[,colnames(eset.gtex)],\rmat2 = dataFilt.ov[,colnames(eset.tcga.cancer)],\rmetadata =FALSE,\rpipeline=\u0026quot;limma\u0026quot;,\rvoom = TRUE,\rCond1type = \u0026quot;Normal\u0026quot;,\rCond2type = \u0026quot;Tumor\u0026quot;,\rfdr.cut = 0.01 ,\rlogFC.cut = 1,\rmethod = \u0026quot;glmLRT\u0026quot;)\r## converting ensenmbl gene ids to huugo gymbols using Biomart package\rmart \u0026lt;- useDataset(\u0026quot;hsapiens_gene_ensembl\u0026quot;, useMart(\u0026quot;ensembl\u0026quot;))\rG_list \u0026lt;- getBM(filters= \u0026quot;ensembl_gene_id\u0026quot;, attributes= c(\u0026quot;ensembl_gene_id\u0026quot;,\u0026quot;hgnc_symbol\u0026quot;), values=rownames(DEG.ov), mart= mart)\rDEG.ov \u0026lt;- rownames_to_column(DEG.ov, var = \u0026quot;ensembl_gene_id\u0026quot;)\rdeg.ov \u0026lt;- merge(DEG.ov, G_list, by = \u0026quot;ensembl_gene_id\u0026quot;)\rExamine the expression levels\rWe define the low expression of the FOLR1 gene as expression level of FOLR1 gene was lower than median expression level. First we tranform counts into TPMs using getTPM function.\n\\[\rRPKM =\\frac{Number\\ of\\ Reads}{(\\frac{Gene\\ Length}{1000})*(\\frac{Total\\ reads}{10^6})}\r\\]\n\\[\rTPM = \\frac{{RPKM}}{{\\sum{RPKM}}} \\times 10^6\r\\]\n## transform counts into TPMs\rgtex.tpm \u0026lt;- getTPM(scale_counts(recount.gtex$GTEX_ovary, round = TRUE)) %\u0026gt;% data.frame()\rtcga.tpm \u0026lt;- getTPM(scale_counts(recount.tcga$TCGA_ovary, round = TRUE)) %\u0026gt;% data.frame()\r## replacing UUIDs with TCGA barcodes:\rcolnames(tcga.tpm) \u0026lt;- colData(recount.tcga$TCGA_ovary)$gdc_cases.samples.portions.analytes.aliquots.submitter_id\r## rename the gene id and remove duplicated rows with same gene id from TPM data\rtpmgenes \u0026lt;- str_split(rownames(tcga.tpm), \u0026quot;\\\\.\u0026quot;, simplify = T)[,1]\rtcga.tpm.df \u0026lt;- tcga.tpm[which(!duplicated(tpmgenes)),]\rrownames(tcga.tpm.df) \u0026lt;- tpmgenes[which(!duplicated(tpmgenes))]\rgtex.tpm.df \u0026lt;- gtex.tpm[which(!duplicated(tpmgenes)),]\rrownames(gtex.tpm.df) \u0026lt;- tpmgenes[which(!duplicated(tpmgenes))]\r## converting ensenmbl gene ids to huugo gymbols using Biomart package\rG_list.tpm \u0026lt;- getBM(filters= \u0026quot;ensembl_gene_id\u0026quot;, attributes= c(\u0026quot;ensembl_gene_id\u0026quot;,\u0026quot;hgnc_symbol\u0026quot;), values=rownames(tcga.tpm.df), mart= mart)\r## remove the rows without gene names\r### merging data by ensembl_gene_id\rtcga.tpm.df$ensembl_gene_id \u0026lt;- rownames(tcga.tpm.df)\rtcga.tpm.mer \u0026lt;- merge(G_list.tpm, tcga.tpm.df, by = \u0026quot;ensembl_gene_id\u0026quot;)\rtcga.tpm.sel \u0026lt;- tcga.tpm.mer[tcga.tpm.mer$hgnc_symbol != \u0026quot;\u0026quot;, -1]\rtcga.tpm.sel \u0026lt;- tcga.tpm.sel[which(!duplicated(tcga.tpm.sel$hgnc_symbol)),]\rrownames(tcga.tpm.sel) \u0026lt;- NULL\rtcga.tpm.fil \u0026lt;- column_to_rownames(tcga.tpm.sel, \u0026quot;hgnc_symbol\u0026quot;)\rgtex.tpm.df$ensembl_gene_id \u0026lt;- row.names.data.frame(gtex.tpm.df)\rgtex.tpm.mer \u0026lt;- merge(G_list.tpm, gtex.tpm.df, by = \u0026quot;ensembl_gene_id\u0026quot;)\rgtex.tpm.sel \u0026lt;- gtex.tpm.mer[gtex.tpm.mer$hgnc_symbol != \u0026quot;\u0026quot;,-1]\rgtex.tpm.sel \u0026lt;- gtex.tpm.sel[which(!duplicated(gtex.tpm.sel$hgnc_symbol)),]\rrownames(gtex.tpm.sel) \u0026lt;- NULL\rgtex.tpm.fil \u0026lt;- column_to_rownames(gtex.tpm.sel, \u0026quot;hgnc_symbol\u0026quot;)\rThere is no significant difference between low and high expressions of the FOLR1 gene. And MUC16 expression is significantly higher in patients with both low and high FOLR1 gene expression compared to normal ovary tissues.\n## calculate the mean tpm per gene\rtcga.tpm.mean \u0026lt;- apply(tcga.tpm.fil, 1, mean, na.rm = T)\rtcga.tpm.mean[names(tcga.tpm.mean) == \u0026quot;FOLR1\u0026quot;]\r## FOLR1 ## 419.3596\rtcga.tpm.mean[names(tcga.tpm.mean) == \u0026quot;MUC16\u0026quot;]\r## MUC16 ## 42.91637\r## extract patients with FOLR1 expression level lower than median value\rlower.sample \u0026lt;- colnames(tcga.tpm.fil)[which(tcga.tpm.fil[rownames(tcga.tpm.fil) == \u0026quot;FOLR1\u0026quot;,] \u0026lt; tcga.tpm.mean[names(tcga.tpm.mean) == \u0026quot;FOLR1\u0026quot;])] # 260\rupper.sample \u0026lt;- colnames(tcga.tpm.fil)[which(tcga.tpm.fil[rownames(tcga.tpm.fil) == \u0026quot;FOLR1\u0026quot;,] \u0026gt;= tcga.tpm.mean[names(tcga.tpm.mean) == \u0026quot;FOLR1\u0026quot;])] # 170\r## extract tpm data of folr1 and muc16\rlower.tcga.tpm \u0026lt;- tcga.tpm.fil[rownames(tcga.tpm.fil) %in% c(\u0026quot;FOLR1\u0026quot;, \u0026quot;MUC16\u0026quot;),colnames(tcga.tpm.fil) %in% lower.sample]\rupper.tcga.tpm \u0026lt;- tcga.tpm.fil[rownames(tcga.tpm.fil) %in% c(\u0026quot;FOLR1\u0026quot;, \u0026quot;MUC16\u0026quot;),colnames(tcga.tpm.fil) %in% upper.sample]\rlower.gtex.tpm \u0026lt;- gtex.tpm.fil[rownames(gtex.tpm.fil) %in% c(\u0026quot;FOLR1\u0026quot;, \u0026quot;MUC16\u0026quot;),]\r## data used for boxplot\rov.lower.df \u0026lt;- data.frame(t(lower.tcga.tpm))\rov.lower.df$group \u0026lt;- \u0026quot;Low_FOLR1\u0026quot;\rov.upper.df \u0026lt;- data.frame(t(upper.tcga.tpm))\rov.upper.df$group \u0026lt;- \u0026quot;High_FOLR1\u0026quot;\rnor.df \u0026lt;- data.frame(t(lower.gtex.tpm))\rnor.df$group \u0026lt;- \u0026quot;Normal\u0026quot;\rbox.df \u0026lt;- rbind(ov.lower.df, ov.upper.df, nor.df)\rbox.df$FOLR1 \u0026lt;- log2(box.df$FOLR1 + 1)\rbox.df$MUC16 \u0026lt;- log2(box.df$MUC16 + 1)\rbox.df$group \u0026lt;- factor(box.df$group, levels = c(\u0026quot;Normal\u0026quot;, \u0026quot;Low_FOLR1\u0026quot;, \u0026quot;High_FOLR1\u0026quot;))\rmy_comparisons \u0026lt;- list( c(\u0026quot;Normal\u0026quot;, \u0026quot;Low_FOLR1\u0026quot;), c(\u0026quot;Normal\u0026quot;, \u0026quot;High_FOLR1\u0026quot;), c(\u0026quot;Low_FOLR1\u0026quot;, \u0026quot;High_FOLR1\u0026quot;) )\rggboxplot(box.df, x = \u0026quot;group\u0026quot;, y = \u0026quot;MUC16\u0026quot;,\rcolor = \u0026quot;group\u0026quot;, palette = \u0026quot;lancet\u0026quot;,\radd = \u0026quot;jitter\u0026quot;) +\rstat_compare_means(comparisons = my_comparisons)\rggboxplot(box.df, x = \u0026quot;group\u0026quot;, y = \u0026quot;FOLR1\u0026quot;,\rcolor = \u0026quot;group\u0026quot;, palette = \u0026quot;lancet\u0026quot;,\radd = \u0026quot;jitter\u0026quot;) +\rstat_compare_means(comparisons = my_comparisons)\r"
},
{
	"uri": "/en/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Basics Discover what this Hugo theme is all about and the core-concepts behind it.\n"
},
{
	"uri": "/en/basics/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": "Thanks to the simplicity of Hugo, this page is as empty as this theme needs requirements.\nJust download latest version of Hugo binary (\u0026gt; 0.25) for your OS (Windows, Linux, Mac) : it\u0026rsquo;s that simple.\n"
},
{
	"uri": "/en/basics/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "The following steps are here to help you initialize your new website. If you don\u0026rsquo;t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u0026lt;new_project\u0026gt; Install the theme Install the Hugo-theme-learn theme by following this documentation\nThis theme\u0026rsquo;s repository is: https://github.com/matcornic/hugo-theme-learn.git\nAlternatively, you can download the theme as .zip file and extract it in the themes directory\nBasic configuration When building the website, you can set a theme by using --theme option. However, we suggest you modify the configuration file (config.toml) and set the theme as the default. You can also add the [outputs] section to enable the search functionality.\n# Change the default theme to be use when building the site with Hugo theme = \u0026#34;hugo-theme-learn\u0026#34; # For search functionality [outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Create your first chapter page Chapters are pages that contain other child pages. It has a special layout style and usually just contains a chapter name, the title and a brief abstract of the section.\n### Chapter 1 # Basics Discover what this Hugo theme is all about and the core concepts behind it. renders as\nHugo-theme-learn provides archetypes to create skeletons for your website. Begin by creating your first chapter page with the following command\nhugo new --kind chapter basics/_index.md By opening the given file, you should see the property chapter=true on top, meaning this page is a chapter.\nBy default all chapters and pages are created as a draft. If you want to render these pages, remove the property draft: true from the metadata.\nCreate your first content pages Then, create content pages inside the previously created chapter. Here are two ways to create content in the chapter:\nhugo new basics/first-content.md hugo new basics/second-content/_index.md Feel free to edit thoses files by adding some sample content and replacing the title value in the beginning of the files.\nLaunching the website locally Launch by using the following command:\nhugo serve Go to http://localhost:1313\nYou should notice three things:\nYou have a left-side Basics menu, containing two submenus with names equal to the title properties in the previously created files. The home page explains how to customize it by following the instructions. When you run hugo serve, when the contents of the files change, the page automatically refreshes with the changes. Neat! Build the website When your site is ready to deploy, run the following command:\nhugo A public folder will be generated, containing all static content and assets for your website. It can now be deployed on any web server.\nThis website can be automatically published and hosted with Netlify (Read more about Automated HUGO deployments with Netlify). Alternatively, you can use Github pages\n"
},
{
	"uri": "/en/basics/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Global site parameters On top of Hugo global configuration, Hugo-theme-learn lets you define the following parameters in your config.toml (here, values are default).\nNote that some of these parameters are explained in details in other sections of this documentation.\n[params] # Prefix URL to edit current page. Will display an \u0026#34;Edit this page\u0026#34; button on top right hand corner of every page. # Useful to give opportunity to people to create merge request for your doc. # See the config.toml file from this documentation site to have an example. editURL = \u0026#34;\u0026#34; # Author of the site, will be used in meta information author = \u0026#34;\u0026#34; # Description of the site, will be used in meta information description = \u0026#34;\u0026#34; # Shows a checkmark for visited pages on the menu showVisitedLinks = false # Disable search function. It will hide search bar disableSearch = false # Javascript and CSS cache are automatically busted when new version of site is generated. # Set this to true to disable this behavior (some proxies don\u0026#39;t handle well this optimization) disableAssetsBusting = false # Set this to true to disable copy-to-clipboard button for inline code. disableInlineCopyToClipBoard = false # A title for shortcuts in menu is set by default. Set this to true to disable it. disableShortcutsTitle = false # If set to false, a Home button will appear below the search bar on the menu. # It is redirecting to the landing page of the current language if specified. (Default is \u0026#34;/\u0026#34;) disableLandingPageButton = true # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = false # Hide breadcrumbs in the header and only show the current page title disableBreadcrumb = true # If set to true, prevents Hugo from including the mermaid module if not needed (will reduce load times and traffic) disableMermaid = false # Specifies the remote location of the mermaid js customMermaidURL = \u0026#34;https://unpkg.com/mermaid@8.8.0/dist/mermaid.min.js\u0026#34; # Hide Next and Previous page buttons normally displayed full height beside content disableNextPrev = true # Order sections in menu by \u0026#34;weight\u0026#34; or \u0026#34;title\u0026#34;. Default to \u0026#34;weight\u0026#34; ordersectionsby = \u0026#34;weight\u0026#34; # Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;. themeVariant = \u0026#34;\u0026#34; # Provide a list of custom css files to load relative from the `static/` folder in the site root. custom_css = [\u0026#34;css/foo.css\u0026#34;, \u0026#34;css/bar.css\u0026#34;] # Change the title separator. Default to \u0026#34;::\u0026#34;. titleSeparator = \u0026#34;-\u0026#34; Activate search If not already present, add the follow lines in the same config.toml file.\n[outputs] home = [ \u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] Learn theme uses the last improvement available in hugo version 20+ to generate a json index file ready to be consumed by lunr.js javascript search engine.\nHugo generate lunrjs index.json at the root of public folder. When you build the site with hugo server, hugo generates it internally and of course it doesn’t show up in the filesystem\nMermaid The mermaid configuration parameters can also be set on a specific page. In this case, the global parameter would be overwritten by the local one.\nExample:\nMermaid is globally disabled. By default it won\u0026rsquo;t be loaded by any page.\nOn page \u0026ldquo;Architecture\u0026rdquo; you need a class diagram. You can set the mermaid parameters locally to only load mermaid on this page (not on the others).\nYou also can disable mermaid for specific pages while globally enabled.\nHome Button Configuration If the disableLandingPage option is set to false, an Home button will appear on the left menu. It is an alternative for clicking on the logo. To edit the appearance, you will have to configure two parameters for the defined languages:\n[Lanugages] [Lanugages.en] ... landingPageURL = \u0026#34;/en\u0026#34; landingPageName = \u0026#34;\u0026lt;i class=\u0026#39;fas fa-home\u0026#39;\u0026gt;\u0026lt;/i\u0026gt; Redirect to Home\u0026#34; ... [Lanugages.fr] ... landingPageURL = \u0026#34;/fr\u0026#34; landingPageName = \u0026#34;\u0026lt;i class=\u0026#39;fas fa-home\u0026#39;\u0026gt;\u0026lt;/i\u0026gt; Accueil\u0026#34; ... If those params are not configured for a specific language, they will get their default values:\nlandingPageURL = \u0026#34;/\u0026#34; landingPageName = \u0026#34;\u0026lt;i class=\u0026#39;fas fa-home\u0026#39;\u0026gt;\u0026lt;/i\u0026gt; Home\u0026#34; The home button is going to looks like this:\n"
},
{
	"uri": "/en/basics/style-customization/",
	"title": "Style customization",
	"tags": [],
	"description": "",
	"content": "Hugo-theme-learn has been built to be as configurable as possible by defining multiple partials\nIn themes/hugo-theme-learn/layouts/partials/, you will find all the partials defined for this theme. If you need to overwrite something, don\u0026rsquo;t change the code directly. Instead follow this page. You\u0026rsquo;d create a new partial in the layouts/partials folder of your local project. This partial will have the priority.\nThis theme defines the following partials :\nheader: the header of the content page (contains the breadcrumbs). Not meant to be overwritten custom-header: custom headers in page. Meant to be overwritten when adding CSS imports. Don\u0026rsquo;t forget to include style HTML tag directive in your file footer: the footer of the content page (contains the arrows). Not meant to be overwritten custom-footer: custom footer in page. Meant to be overwritten when adding Javacript. Don\u0026rsquo;t forget to include javascript HTML tag directive in your file favicon: the favicon logo: the logo, on top left hand corner. meta: HTML meta tags, if you want to change default behavior menu: left menu. Not meant to be overwritten menu-footer: footer of the the left menu search: search box toc: table of contents Change the logo Create a new file in layouts/partials/ named logo.html. Then write any HTML you want. You could use an img HTML tag and reference an image created under the static folder, or you could paste a SVG definition !\nThe size of the logo will adapt automatically\nChange the favicon If your favicon is a png, just drop off your image in your local static/images/ folder and name it favicon.png\nIf you need to change this default behavior, create a new file in layouts/partials/ named favicon.html. Then write something like this:\n\u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; href=\u0026#34;/images/favicon.png\u0026#34; type=\u0026#34;image/x-icon\u0026#34; /\u0026gt; Change default colors Hugo Learn theme let you choose between 3 native color scheme variants, but feel free to add one yourself ! Default color scheme is based on Grav Learn Theme.\nRed variant [params] # Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;. themeVariant = \u0026#34;red\u0026#34; Blue variant [params] # Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;. themeVariant = \u0026#34;blue\u0026#34; Green variant [params] # Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;. themeVariant = \u0026#34;green\u0026#34; \u0026lsquo;Yours‘ variant First, create a new CSS file in your local static/css folder prefixed by theme (e.g. with mine theme static/css/theme-mine.css). Copy the following content and modify colors in CSS variables.\n:root{ --MAIN-TEXT-color:#323232; /* Color of text by default */ --MAIN-TITLES-TEXT-color: #5e5e5e; /* Color of titles h2-h3-h4-h5 */ --MAIN-LINK-color:#1C90F3; /* Color of links */ --MAIN-LINK-HOVER-color:#167ad0; /* Color of hovered links */ --MAIN-ANCHOR-color: #1C90F3; /* color of anchors on titles */ --MENU-HEADER-BG-color:#1C90F3; /* Background color of menu header */ --MENU-HEADER-BORDER-color:#33a1ff; /*Color of menu header border */ --MENU-SEARCH-BG-color:#167ad0; /* Search field background color (by default borders + icons) */ --MENU-SEARCH-BOX-color: #33a1ff; /* Override search field border color */ --MENU-SEARCH-BOX-ICONS-color: #a1d2fd; /* Override search field icons color */ --MENU-SECTIONS-ACTIVE-BG-color:#20272b; /* Background color of the active section and its childs */ --MENU-SECTIONS-BG-color:#252c31; /* Background color of other sections */ --MENU-SECTIONS-LINK-color: #ccc; /* Color of links in menu */ --MENU-SECTIONS-LINK-HOVER-color: #e6e6e6; /* Color of links in menu, when hovered */ --MENU-SECTION-ACTIVE-CATEGORY-color: #777; /* Color of active category text */ --MENU-SECTION-ACTIVE-CATEGORY-BG-color: #fff; /* Color of background for the active category (only) */ --MENU-VISITED-color: #33a1ff; /* Color of \u0026#39;page visited\u0026#39; icons in menu */ --MENU-SECTION-HR-color: #20272b; /* Color of \u0026lt;hr\u0026gt; separator in menu */ } body { color: var(--MAIN-TEXT-color) !important; } textarea:focus, input[type=\u0026#34;email\u0026#34;]:focus, input[type=\u0026#34;number\u0026#34;]:focus, input[type=\u0026#34;password\u0026#34;]:focus, input[type=\u0026#34;search\u0026#34;]:focus, input[type=\u0026#34;tel\u0026#34;]:focus, input[type=\u0026#34;text\u0026#34;]:focus, input[type=\u0026#34;url\u0026#34;]:focus, input[type=\u0026#34;color\u0026#34;]:focus, input[type=\u0026#34;date\u0026#34;]:focus, input[type=\u0026#34;datetime\u0026#34;]:focus, input[type=\u0026#34;datetime-local\u0026#34;]:focus, input[type=\u0026#34;month\u0026#34;]:focus, input[type=\u0026#34;time\u0026#34;]:focus, input[type=\u0026#34;week\u0026#34;]:focus, select[multiple=multiple]:focus { border-color: none; box-shadow: none; } h2, h3, h4, h5 { color: var(--MAIN-TITLES-TEXT-color) !important; } a { color: var(--MAIN-LINK-color); } .anchor { color: var(--MAIN-ANCHOR-color); } a:hover { color: var(--MAIN-LINK-HOVER-color); } #sidebar ul li.visited \u0026gt; a .read-icon { color: var(--MENU-VISITED-color); } #body a.highlight:after { display: block; content: \u0026#34;\u0026#34;; height: 1px; width: 0%; -webkit-transition: width 0.5s ease; -moz-transition: width 0.5s ease; -ms-transition: width 0.5s ease; transition: width 0.5s ease; background-color: var(--MAIN-LINK-HOVER-color); } #sidebar { background-color: var(--MENU-SECTIONS-BG-color); } #sidebar #header-wrapper { background: var(--MENU-HEADER-BG-color); color: var(--MENU-SEARCH-BOX-color); border-color: var(--MENU-HEADER-BORDER-color); } #sidebar .searchbox { border-color: var(--MENU-SEARCH-BOX-color); background: var(--MENU-SEARCH-BG-color); } #sidebar ul.topics \u0026gt; li.parent, #sidebar ul.topics \u0026gt; li.active { background: var(--MENU-SECTIONS-ACTIVE-BG-color); } #sidebar .searchbox * { color: var(--MENU-SEARCH-BOX-ICONS-color); } #sidebar a { color: var(--MENU-SECTIONS-LINK-color); } #sidebar a:hover { color: var(--MENU-SECTIONS-LINK-HOVER-color); } #sidebar ul li.active \u0026gt; a { background: var(--MENU-SECTION-ACTIVE-CATEGORY-BG-color); color: var(--MENU-SECTION-ACTIVE-CATEGORY-color) !important; } #sidebar hr { border-color: var(--MENU-SECTION-HR-color); } Then, set the themeVariant value with the name of your custom theme file. That\u0026rsquo;s it !\n[params] # Change default color scheme with a variant one. Can be \u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;green\u0026#34;. themeVariant = \u0026#34;mine\u0026#34; "
},
{
	"uri": "/en/",
	"title": "Learn Theme for Hugo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/en/categories/r/",
	"title": "R",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/en/tags/r-markdown/",
	"title": "R Markdown",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]